####################
# unite
####################
[[plugins]]
repo = 'Shougo/unite.vim'
on_cmd = ["Unite", "UniteWithBufferDir"]
      #\ "autoload": {
      #\   "commands": ["Unite", "UniteWithBufferDir"]
      #\ }}
hook_add = '''
nnoremap [unite] <Nop>
nmap U [unite]
nnoremap <silent> [unite]f :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
nnoremap <silent> [unite]b :<C-u>Unite buffer<CR>
nnoremap <silent> [unite]r :<C-u>Unite register<CR>
nnoremap <silent> [unite]m :<C-u>Unite file_mru<CR>
nnoremap <silent> [unite]c :<C-u>Unite bookmark<CR>
nnoremap <silent> [unite]o :<C-u>Unite outline<CR>
nnoremap <silent> [unite]t :<C-u>Unite tab<CR>
nnoremap <silent> [unite]w :<C-u>Unite window<CR>
nnoremap <silent> [unite]s :<C-u>Unite session<CR>
'''
hook_post_source = '''
if dein#tap('unite.vim')
  let g:unite_enable_start_insert = 1
  call unite#custom_default_action("source/bookmark/directory", "vimfiler")
  call unite#custom_default_action("directory", "vimfiler")
  call unite#custom_default_action("directory_mru", "vimfiler")
  autocmd MyAutoCmd FileType unite call s:unite_settings()
  function! s:unite_settings()
    imap <buffer> <Esc><Esc> <Plug>(unite_exit)
    nmap <buffer> <Esc> <Plug>(unite_exit)
    nmap <buffer> <C-n> <Plug>(unite_select_next_line)
    nmap <buffer> <C-p> <Plug>(unite_select_previous_line)
  endfunction
endif
'''

[[plugins]]
repo = 'h1mesuke/unite-outline'
      #\ "autoload": {
      #\   "unite_sources": ["outline"],
      #\ }}
on_source = ['unite.vim']

[[plugins]]
repo = 'Shougo/unite-session'
on_source = ['unite.vim']

####################
# filer
####################
[[plugins]]
repo = "Shougo/vimfiler"
on_source = ['unite.vim']
on_cmd = ["VimFilerTab", "VimFiler", "VimFilerExplorer"]
on_map = ['<Plug>(vimfiler_switch)']
      #\ "depends": ["Shougo/unite.vim"],
      #\ "autoload": {
      #\   "commands": ["VimFilerTab", "VimFiler", "VimFilerExplorer"],
      #\   "mappings": ['<Plug>(vimfiler_switch)'],
      #\   "explorer": 1,
      #\ }}
hook_add = '''
nnoremap <Leader>e :VimFilerExplorer -split -winwidth=50 <CR>
" close vimfiler automatically when there are only vimfiler open
autocmd MyAutoCmd BufEnter * if (winnr('$') == 1 && &filetype ==# 'vimfiler') | q | endif
let g:vimfiler_as_default_explorer = 1
let g:vimfiler_enable_auto_cd = 1
'''
hook_post_source = '''
if dein#tap('vimfiler')
  autocmd MyAutoCmd FileType vimfiler call s:vimfiler_settings()
  function! s:vimfiler_settings()
    nmap <buffer> ^^ <Plug>(vimfiler_switch_to_parent_directory)
    nmap <buffer> R <Plug>(vimfiler_redraw_screen)
    nmap <buffer> <C-l> <C-w>l
    nmap <buffer>s          :call vimfiler#mappings#do_action('my_split')<Cr>
    nmap <buffer>v          :call vimfiler#mappings#do_action('my_vsplit')<Cr>
  endfunction
endif
'''

####################
# undo
####################
[[plugins]]
repo = "sjl/gundo.vim"
      #\ "autoload": {
      #\   "commands": ['GundoToggle'],
      #\}}
hook_post_updaete = '''
nnoremap <Leader>g :GundoToggle<CR>
'''

####################
# todo
####################
[[plugins]]
post =  "vim-scripts/TaskList.vim"
      #\ "autoload": {
      #\   "mappings": ['<Plug>TaskList'],
      #\}}
hook_add = '''
nmap <Leader>T <plug>TaskList
'''

####################
# tagbar
####################
[[plugins]]
repo = 'majutsushi/tagbar'
      #\ "autload": {
      #\   "commands": ["TagbarToggle"],
      #\ },
      #\ "build": {
      #\   "mac": "brew install ctags",
      #\ }}
hook_add = '''
nmap <Leader>t :TagbarToggle<CR>
'''
